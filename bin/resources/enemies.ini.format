# Format specification for enemies.ini
# Note that lines beginning with a hash mark like
# these lines represent comments and will be ignored
# by the parser.
# These comments run until the end of the line.
# These are global settings that apply to the entire
# file.
[global]
# The format version of the file.
# This number should be 1 for now.
version = 1

# This section is used for denoting the names of targets
# for buffs.
# And yes, this section must come after [global] but
# before the definitions of any enemies.
[buff_targets]
# The braces are mandatory; don't forget them!
targets = {
	# Each individual group of possible targets should
	# be surrounded by braces (and they must be formatted
	# similar to how they are here; in particular,
	# writing targets = {{ would be invalid.)
	{
		# This is the name used to refer to this group of targets when
		# defining enemies with buffs later on in the file.
		group_name = "Buff Group A"
		# This is basically a list of names that buffs that use
		# this group of targets applies to.
		# You should use the name of the enemy, and remember
		# that case matters (i.e.: "Enemy" and "enemy" are NOT the same)
		# Note that the commas are optional, but recommended, and that you
		# are allowed to split this onto multiple lines.
		# Also, generally speaking, you don't write duplicates names; I have
		# done so only to show you the syntax of the property.
		target_names = <"My Name", "Another Enemy">
		# Note that the comma after the end brace is optional
	},
	{
		# Define another group of targets here...
		group_name = "Buff Group B"
		target_names = <"My Name">
	}
}

# Begin each new enemy with the [enemy] header
[enemy]
# Name of the enemy
name = "My Name"
# Description of the enemy
desc = "My Desc"
# Color used to fill the interior of the enemy
# Specify in the format of <R, G, B, A>
# G => Green, B => Blue, and A => Alpha
# Note that these values are percentages
# out of 100% (1.0); for instance,
# <1.0, 1.0, 0.0, 1.0> represents
# fully opaque yellow<
color = <1.0, 1.0, 0.0, 1.0>
# The shape of the enemy
# Valid values (no quotes): Ellipse, Triangle, Rectangle,
# Diamond, and Star. (Note that case matters!)
shape = Rectangle
# This number specifies the amount of damage done by
# the enemy to the player if it reaches the goal.
# Almost always, you should specify one here. Two
# and three are occassionally used for rarer
# enemies, and three, four, or five are typically
# used for bosses.
# Values >= 20 are used when it is intended for
# the player to automatically lose if the enemy
# reaches the goal.
damage = 1
# This number specifies the base amount of damage
# that the enemy can withstand before dying.
# Note that health is also affected by difficulty
# and level, so this number is typically a minimum
# value.
health = 10
# This number specifies the base amount of damage
# that the enemy's armor can withstand before
# breaking.
armor_health = 5
# This number specifies the percentage of damage
# that is mitigated while the enemy possesses armor.
# For instance, if an enemy takes 10 damage from a shot
# and possesses an armor reduction of 0.10 (i.e.: 10%),
# then that enemy will receive 10 - (10 * 0.10) or 9
# damage to their armor.
# Note that some shots can pierce through armor, so
# in general, make sure enemies with tough armor
# have some health as well!
armor_reduce = 0.10
# This number specifies the percentage of damage
# that the enemy can receive before being considered
# in an "injured" state. You should specify this
# number as a decimal from 0 to 1.0. Note that
# this state is based off of the enemy's health,
# not the amount of hitpoints remaining in the
# enemy's armor.
# A value of 0.60 means that the enemy enters
# the injured state when it has lost 60% of
# its health.
# In this case, when the enemy's remaining
# health reaches 4, the enemy will be considered
# to be injured.
pain_tolerance = 0.60
# This is the speed (in game coordinate squares
# per second) that the enemy moves at if its
# armor is still active, and it is not considered
# to be in an injured state.
# Also, note that an enemy's movement speed is
# affected by many other factors as well including
# the terrain.
# Generally speaking, you don't want to set this
# value really high.
# Values between 0.50 and 1.24 tend to be quite
# slow.
# Values between 1.25 and 2.24 tend to be moderate.
# Values between 2.25 and 3.24 tend to be fast.
# Values greater than or equal to 3.25 tend to be
# really fast.
# I wouldn't recommend setting this value any higher
# than 5.00 as a maximum.
walking_speed = 1.250
# This is the speed (in game coordinate squares
# per second) that the enemy moves at if it
# possesses no armor, and it is not considered
# to be critically injured.
# This value should typically be greater than
# the enemy's walking speed.
running_speed = 1.500
# This is the speed (in game coordinate squares
# per second) that the enemy moves at if it
# is considered to be in the injured state.
# This value should typically be lower than
# the enemy's walking speed.
injured_speed = 1.000
# This is the pathfinding strategy the enemy
# uses. Really, you could probably just set
# this value to whatever as it is simply used
# as a heuristic for the path; thus, it does
# not play a significant factor most of the
# time. Still, as a general rule, enemies
# that cannot move diagonally should always
# use Manhattan, and enemies that can
# move diagonally should generally use
# Diagonal for best results.
# Valid values include: Manhattan, Euclidean,
# Diagonal, and Maximum.
strategy = Manhattan
# This determines whether the enemy is allowed
# to move diagonally.
# Valid values are true and false.
can_move_diagonally = false
# This determines whether the enemy is
# considered to be a flying enemy or not.
# Flying enemies start at a different location
# than regular enemies, and they also tend to
# have a different goal space as well.
# Certain towers may also be more or less
# effective against flying enemies.
# Generally speaking, flying enemies should
# not appear early in the game as cash is
# limited early game, and it will be quite
# a surprise for enemies to pop out somewhere
# unexpected.
# Valid values are true and false.
is_flying = false

# You must include this element, even if it is empty.
buffs = {
	# Each buff must be enclosed by its own set of brackets
	# Don't forgot that there are two brackets preceding the first
	# buff!
	{
		# This is probably the most important setting for a buff
		# as it determines which buff is applied!
		# Valid values are (everything before the initial dash):
		# Intelligence - Temporarily improves the pathfinding
		# of affected enemies
		# Speed - Temporarily increases the speed of affected
		# enemies.
		# Healer - Occassionally restores the health of
		# nearby enemies.
		# Purify - Occassionally cleanses nearby enemies
		# of harmful effects.
		type = Intelligence
		# Remember those group names you defined earlier
		# in the buff targets section of this file?
		# This is where you place them; the game will
		# resolve the group name to the actual list
		# of enemy names that are affected by this
		# buff. (Note that the quotes are mandatory.)
		targets = "Buff Group A"
		# This determines how far another enemy can be
		# from this enemy in order to receive the
		# benefits of the buff. This is measured
		# in game coordinate squares, and keep in
		# mind that this is a "radius".
		radius = 3.0
		# Buffs are not activated every logical frame
		# of the game as that would be hard to balance
		# (plus a little inefficient). This value
		# determines the approximate time (in
		# milliseconds) between when the buffs
		# are activated. For instance, if this
		# value is 250, then the buff will be
		# activated every 0.25s (or at 250 ms,
		# 500 ms, and so forth).
		# Don't this to values lower than 10 ms
		# as the game is updated in terms of
		# logical frames, and depending on what
		# I decide as the best value, the number
		# of logical frames in a single second
		# will vary between about 60 fps to
		# 200 fps.
		# Also, note that for intelligence buffs,
		# if the enemy switches strategies often,
		# the game will slow significantly because
		# the entire path has to be recalculated
		# each time.
		# It is not guaranteed that surrounding enemies
		# will change strategies immediately. In fact,
		# I have purposefully added a 0-19 frame delay.
		# This delay is random for each enemy, but
		# it is done in attempt to decrease the number
		# of paths that must be updated in a given frame.
		# ***FOR THIS REASON, IT IS IMPERATIVE THAT
		# DELAY >= DURATION + 25.*** Strange things
		# can happen if one does not follow the previous
		# guideline, and I do not plan on spending the
		# time reasoning about this behavior for the
		# time being.
		delay = 100
		# This parameter only applies to certain
		# kinds of buffs like Intelligence and
		# Speed where the effect goes away after
		# a while. This is the time in milliseconds
		# that said effects last for.
		# ***IT IS IMPERATIVE THAT DURATION + 25
		# <= DELAY.*** (See above comment.)
		duration = 75
	},
	# Note that the above comma is optional
	{
		# Here, one can define another buff.
		# The first four options are always the same:
		# type - the type of the buff
		# targets - the name of the group of enemies
		#           affected by the buff
		# radius - the maximum distance that the buff
		#          works at.
		# delay - the amount of time (in ms) between
		#         activations of the buff.
		type = Speed
		targets = "Buff Group B"
		radius = 2.5
		delay = 250
		# Like Intelligence buffs, Speed buffs also
		# have a duration in ms that they last for.
		duration = 150
		# Speed buffs also have a few additional
		# parameters.
		# Note that for all of these values,
		# they are multiplicative rather than
		# additive. Examples will be noted below.
		# This value is the percentage increase to
		# the enemy's walking speed, expressed as
		# a decimal. For instance, 0.25 represents
		# a 25% increase in walking speed; in other
		# words, the enemy will walk at 125% of
		# their original walking speed.
		# As mentioned earlier, cumulative speed
		# boosts are multiplicative, so if an
		# enemy receives two 25% walking speed boost
		# buffs, the actual effect will be that the
		# enemy ends up walking at 156.25% of their
		# normal walking speed, NOT 150%.
		walking_speed_boost = 0.25
		# This is just like walking speed boost, except
		# it boosts the enemy's running speed.
		# Don't forget to specify this as a decimal;
		# specificying 50 when you mean to put
		# 0.50 (for +50%) is NOT going to have the effect
		# you desired!
		running_speed_boost = 0.50
		# Like walking speed boost and running speed
		# boost, this value boosts the enemy's
		# speed when in the injured state by the given
		# percentage.
		injured_speed_boost = 0.15
	}
	# Notice that I omitted the comma above;
	# The configuration file should still be able to read without it.
	{
		# This time, we are doing a healing buff
		type = Healer
		targets = "Buff Group A"
		radius = 1.25
		# Note that healing effects can get out of
		# hand pretty quickly.
		# I wouldn't recommend setting this value
		# very low unless you plan to set the heal
		# amount very low as well.
		delay = 1500
		# This value determines how much health is
		# restored to an enemy every time the healing
		# buff is activated.
		# Note that it perfectly legal to specify
		# a decimal value here. (Perhaps you may do
		# so to give the illusion of a gradual healing
		# effect if you also set a low delay value!)
		# Anything above 10 is probably too high, but
		# it depends on what you set delay to.
		heal_amount = 2.50
	}
	{
		# This one is a purification buff.
		type = Purify
		targets = "Buff Group B"
		radius = 3.50
		delay = 750
		# This number determines the maximum number of
		# hostile effects (which by the way can be
		# anything ranging from stun effects and speed
		# debuffs to damage over time effects) that
		# are removed from EACH enemy whenever the
		# buff is activated.
		# It is probably better to keep this value
		# low unless you plan on making it where
		# the enemies affected by this buff never
		# suffer from harmful effects.
		purify_max_effects = 2
	},
	{
		# This time, we are doing a repair buff
		type = Repair
		targets = "Buff Group A"
		radius = 1.25
		# Note that repair effects can get out of
		# hand pretty quickly.
		# I wouldn't recommend setting this value
		# very low unless you plan to set the repair
		# amount very low as well.
		delay = 1500
		# This value determines how much armor health is
		# restored to an enemy every time the repair
		# buff is activated.
		# Note that it perfectly legal to specify
		# a decimal value here. (Perhaps you may do
		# so to give the illusion of a gradual repair
		# effect if you also set a low delay value!)
		# Anything above 10 is probably too high, but
		# it depends on what you set delay to.
		repair_amount = 2.50
	}
	# Good indentation helps with these brackets;
	# Don't forget to include this second closing
	# bracket when you are finished defining buffs
	# for the enemies.
}

# You can define more enemies by simply adding
# more [enemy] section headers
[enemy]
name = "Another Enemy"
desc = "Another example enemy for you!"
color = <0.75, 0.33, 0.33, 1.0>
shape = Star
damage = 1
health = 16
armor_health = 0
armor_reduce = 0.00
pain_tolerance = 0.75
walking_speed = 1.750
running_speed = 1.750
injured_speed = 1.333
strategy = Euclidean
can_move_diagonally = true
is_flying = false
# As mentioned earlier, you MUST include
# this element even if the enemy possesses
# no buffs.
# In this special case, you MUST place
# two braces side-by-side on the same
# line exactly as shown below:
buffs = {}

# Some other notes:
# The file parser runs primarily on a line to line
# basis. In other words, you cannot write something like
# buffs = {{
# (...)
# }}
# (The braces must appear on separate lines).
# Also note that capitalization matters and that writing
# something in quotes is not the same thing as writing
# something without quotes (i.e.: you can't intermix the
# two).
# Finally, note that the ordering of things must be as
# specified above. That may be obnoxious, but it makes
# implementing a file parser so much easier, and I think
# that the forced consistency is actually beneficial.
# If you do type something wrong, the game **should**
# complain when it tries to load the game, but I make
# no guarantees this will happen. The error messages
# should provide enough information (alongside this
# example file) to help you figure out what the
# issue is. (Note that the line numbers may be off
# by one or so lines.)
# And feel free to edit the enemies.ini file as you
# like; I didn't provide this file simply for my own
# reference!
